import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Button, Menu, Textfield, Title, } from '../..';
import { Popover } from './popover';
const story = {
    title: 'Dialogs/Popover',
    component: Popover,
    args: {
        placement: 'auto-start',
        trigger: _jsx(Button, { children: "Open Popover" }),
    },
};
export default story;
const DefaultTemplate = (args) => {
    const [isChecked, setIsChecked] = useState(false);
    return (_jsx(Popover, { ...args, children: _jsxs(Menu, { children: [_jsx(Menu.Item, { autoFocus: true, icon: "arrow-right", description: _jsx(_Fragment, { children: "Description for this item" }), value: "1", children: "Sample long menu item" }), _jsx(Menu.ItemCheckbox, { onClick: () => setIsChecked(val => !val), checked: isChecked, icon: isChecked ? 'check' : undefined, value: "2", children: "Checkbox item" }), _jsx(Menu.Item, { icon: "user", value: "3", description: (_jsxs(_Fragment, { children: [_jsx(Title, { as: "h2", level: "5", children: "Sample H2 Title longlonglonglonglonglonglonglonglonglonglong" }), _jsx("p", { children: "long text content placeholder to test wrapping and sizes" }), _jsx("img", { style: { width: '100%' }, alt: "", src: "https://images.unsplash.com/photo-1593963171957-d87a6279226d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80" })] })), children: "Short menu label" }), _jsx(Menu.Separator, {}), _jsx(Menu.Item, { value: "4", icon: "arrow-down-to-bracket", children: "Even shorter" }), _jsx(Menu.Item, { value: "5", disabled: true, children: "Really?" })] }) }));
};
export const Default = DefaultTemplate.bind({});
const CustomTemplate = args => (_jsxs(_Fragment, { children: [_jsx(Popover, { ...args, children: _jsx("div", { style: {
                    background: 'var(--global-vibrancy-background)', backdropFilter: 'blur(10px)', border: '2px solid black', padding: 24,
                }, children: "Lorem." }) }), _jsx(Popover, { ...args, children: _jsx("div", { style: {
                    background: 'var(--global-vibrancy-background)', backdropFilter: 'blur(10px)', border: '2px solid black', padding: 24,
                }, children: "Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni error unde sapiente beatae! Nostrum praesentium similique veniam non ut nulla, incidunt velit et, placeat cupiditate, aliquid saepe. Atque, provident perferendis?" }) })] }));
export const CustomElement = CustomTemplate.bind({});
CustomElement.args = {
    matchTriggerWidth: true,
    placement: 'bottom-start',
};
const WithFieldTemplate = args => (_jsx(_Fragment, { children: _jsx(Popover, { ...args, children: _jsx("div", { style: {
                background: 'var(--global-vibrancy-background)', backdropFilter: 'blur(10px)', border: '2px solid black', padding: 24,
            }, children: "Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni error unde sapiente beatae! Nostrum praesentium similique veniam non ut nulla, incidunt velit et, placeat cupiditate, aliquid saepe. Atque, provident perferendis?" }) }) }));
export const WithField = WithFieldTemplate.bind({});
WithField.args = {
    trigger: _jsx(Textfield, { type: "search", icon: "magnifying-glass" }),
    matchTriggerWidth: true,
    placement: 'bottom-start',
};
const ControlledTemplate = (args) => {
    const [isOpen, setIsOpen] = useState(false);
    return (_jsx(Popover, { ...args, trigger: (_jsx(Button, { onClick: () => setIsOpen(val => !val), children: `${isOpen ? 'Close' : 'Open'} Popover` })), onOpenChange: state => setIsOpen(state), open: isOpen, children: _jsxs("div", { style: {
                background: 'var(--global-vibrancy-background)', backdropFilter: 'blur(10px)', border: '2px solid black', padding: 24,
            }, children: ["Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magni error unde sapiente beatae! Nostrum praesentium similique veniam non ut nulla, incidunt velit et, placeat cupiditate, aliquid saepe. Atque, provident perferendis?", _jsx("button", { type: "button", onClick: () => setIsOpen(val => !val), children: "Close popover" })] }) }));
};
export const Controlled = ControlledTemplate.bind({});
Controlled.args = {};
