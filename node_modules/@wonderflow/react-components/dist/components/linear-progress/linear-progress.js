import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/*
 * Copyright 2022 Wonderflow <authored by Mattia Astorino>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import clsx from 'clsx';
import { forwardRef, useCallback } from 'react';
import { Text } from '../..';
import * as styles from './linear-progress.module.css';
export const LinearProgress = forwardRef(({ className, value, max = 100, dimension = 'regular', showProgress, ...otherProps }, forwardedRef) => {
    const getPercentage = useCallback(() => (value ? Math.round((100 * value) / max) : 0), [max, value]);
    const clamp = (num, min, max) => Math.min(Math.max(num, min), max);
    return (_jsxs("div", { className: clsx(styles.LinearProgress, className), children: [_jsx("progress", { ref: forwardedRef, className: styles.Progress, "data-progress-dimension": dimension, "aria-valuemin": 0, "aria-valuenow": value, "aria-valuemax": max, value: value, max: max, ...otherProps }), (showProgress) && (_jsx(Text, { as: "span", className: styles.Percentage, style: {
                    '--offset': `${getPercentage()}%`,
                    '--translation': value !== 0 ? '-100%' : '-50%',
                }, weight: "bold", size: dimension === 'regular' ? 16 : 18, children: value && clamp(getPercentage(), 0, 100) }))] }));
});
LinearProgress.displayName = 'LinearProgress';
