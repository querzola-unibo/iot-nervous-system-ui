import { jsx as _jsx } from "react/jsx-runtime";
/*
 * Copyright 2022 Wonderflow <authored by Mattia Astorino>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import tkns from '@wonderflow/tokens/platforms/web/tokens.json';
import clsx from 'clsx';
import { domMax, LazyMotion, m } from 'framer-motion';
import { forwardRef, useMemo } from 'react';
import { FocusOn } from 'react-focus-on';
import { useOverlayContext, useResponsiveContext } from '../..';
import { ModalContent } from './content/modal-content';
import * as styles from './modal.module.css';
const cssEasingToArray = (cssEasing) => {
    const [x1, y1, x2, y2] = cssEasing.replace(/[^0-9.,]+/g, '').split(',').map(i => parseFloat(i));
    return [x1, y1, x2, y2];
};
export const Modal = forwardRef(({ children, className, closeOnClickOutside = true, ...otherProps }, forwardedRef) => {
    const { titleId, onClose } = useOverlayContext();
    const { matches } = useResponsiveContext();
    const ModalAnimation = useMemo(() => ({
        visible: {
            scale: 1,
            opacity: 1,
            y: 0,
            transition: {
                ease: cssEasingToArray(tkns.easing.entrance),
                duration: parseFloat(tkns.duration[300].replace('s', '')),
            },
        },
        hidden: {
            scale: matches.small ? 0.98 : 1,
            opacity: matches.small ? 0 : 1,
            y: matches.small ? 0 : '100%',
            transition: {
                ease: cssEasingToArray(tkns.easing.exit),
                duration: matches.small ? parseFloat(tkns.duration[200].replace('s', '')) : parseFloat(tkns.duration[500].replace('s', '')),
            },
        },
    }), [matches]);
    return (_jsx("div", { role: "dialog", "aria-modal": "true", "aria-labelledby": titleId, className: clsx(styles.Modal, className), ref: forwardedRef, ...otherProps, children: _jsx(FocusOn, { onClickOutside: closeOnClickOutside ? onClose : undefined, onEscapeKey: onClose, children: _jsx(LazyMotion, { features: domMax, children: _jsx(m.div, { variants: ModalAnimation, initial: "hidden", animate: "visible", exit: "hidden", className: styles.Container, children: children }) }) }) }));
});
Modal.displayName = 'Modal';
Modal.Content = ModalContent;
