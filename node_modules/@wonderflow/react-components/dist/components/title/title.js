import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/*
 * Copyright 2022 Wonderflow <authored by Mattia Astorino>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import clsx from 'clsx';
import { Children, forwardRef, useCallback, } from 'react';
import slugify from 'slugify';
import { Symbol } from '../..';
import * as styles from './title.module.css';
export const Title = forwardRef(({ children, className, as: Wrapper = 'span', lineHeight = 'small', level = '1', textAlign = 'start', maxWidth, responsive = true, style, anchor, id, ...otherProps }, forwardedRef) => {
    const computedLevel = level.match(/\d/g) ? `H${level}` : `${level.charAt(0).toUpperCase()}${level.slice(1)}`;
    const getTextFromChildren = useCallback(() => {
        let label = '';
        Children.map(children, (child) => {
            if (typeof child === 'string') {
                label += child;
            }
        });
        return label;
    }, [children]);
    const generatedID = slugify(String(id ?? getTextFromChildren()), { lower: true });
    const dynamicStyle = {
        '--max-w': maxWidth,
        '--t-align': textAlign,
    };
    return (_jsxs(Wrapper, { ref: forwardedRef, "data-title-line-height": lineHeight, "data-title-responsive": responsive, 
        // @ts-expect-error: computedLevel is not a pure class in css module
        className: clsx(styles.Title, styles[computedLevel], className), style: { ...dynamicStyle, ...style }, id: generatedID, ...otherProps, children: [children, anchor && (_jsx("a", { href: `#${generatedID}`, className: styles.Anchor, children: _jsx(Symbol, { source: "link", weight: "duotone", dimension: 24 }) }))] }));
});
